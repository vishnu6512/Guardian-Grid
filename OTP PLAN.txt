Step-by-Step Flow of Data and Working

I'll explain the entire flow in three stages: Frontend (React), Backend (Node.js/Express), and Database (MongoDB).
1. User Registration & OTP Flow (Step-by-Step)
Step 1: User Fills Out the Form (Frontend → React)

    The user enters Name, Email, Phone Number, and Location in the form.
    On clicking "Submit," the form sends data to the backend (/send-otp API).

Step 2: Backend Generates & Sends OTP (Backend → OTP Service)

    The backend (Node.js/Express) receives the request.
    It generates a random 6-digit OTP and sends it to the user via an OTP service (like Firebase or Twilio).
    The OTP is stored temporarily in MongoDB or in-memory storage (like Redis).

Step 3: User Enters OTP for Verification (Frontend → React)

    The frontend shows an input field asking the user to enter the OTP.
    When the user enters the OTP and clicks "Verify," the frontend sends the OTP along with the phone number to the backend (/verify-otp API).

Step 4: Backend Verifies OTP (Backend → Database)

    The backend checks if the OTP entered matches the stored OTP.
    If it matches, the user's data is saved in MongoDB.
    If it doesn’t match, an error message is sent back to the frontend.

Step 5: Registration Success (Frontend)

    If OTP verification is successful, the frontend shows a success message.
    If OTP fails, the user can request a new OTP.

2. Implementing in MERN Stack

Now, let’s break it down into Frontend (React) and Backend (Node.js/Express).
Frontend (React.js)
Install Axios for API Requests

You'll need Axios to send requests to the backend.

npm install axios

User Registration Form (React)

import React, { useState } from "react";
import axios from "axios";

const Register = () => {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    location: "",
  });
  const [otp, setOtp] = useState("");
  const [otpSent, setOtpSent] = useState(false);
  const [verified, setVerified] = useState(false);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const sendOTP = async () => {
    try {
      const response = await axios.post("http://localhost:5000/send-otp", {
        phone: formData.phone,
      });
      alert(response.data.message);
      setOtpSent(true);
    } catch (error) {
      alert("Error sending OTP");
    }
  };

  const verifyOTP = async () => {
    try {
      const response = await axios.post("http://localhost:5000/verify-otp", {
        phone: formData.phone,
        otp: otp,
      });
      if (response.data.success) {
        alert("OTP Verified! Registration complete.");
        setVerified(true);
      } else {
        alert("Invalid OTP, try again.");
      }
    } catch (error) {
      alert("Error verifying OTP");
    }
  };

  return (
    <div>
      {!otpSent ? (
        <div>
          <h2>Register</h2>
          <input type="text" name="name" placeholder="Name" onChange={handleChange} />
          <input type="email" name="email" placeholder="Email" onChange={handleChange} />
          <input type="text" name="phone" placeholder="Phone Number" onChange={handleChange} />
          <input type="text" name="location" placeholder="Location" onChange={handleChange} />
          <button onClick={sendOTP}>Send OTP</button>
        </div>
      ) : (
        <div>
          <h2>Enter OTP</h2>
          <input type="text" placeholder="Enter OTP" onChange={(e) => setOtp(e.target.value)} />
          <button onClick={verifyOTP}>Verify OTP</button>
        </div>
      )}
    </div>
  );
};

export default Register;

Backend (Node.js + Express)
Install Dependencies

npm install express cors mongoose dotenv twilio

    Express: For handling API requests.
    Cors: To allow frontend-backend communication.
    Mongoose: For MongoDB database.
    Dotenv: To manage environment variables.
    Twilio: To send OTP via SMS (can be replaced with Firebase).

Backend Code (server.js)

require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const twilio = require("twilio");

const app = express();
app.use(express.json());
app.use(cors());

mongoose.connect("mongodb://localhost:27017/otp-verification", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const userSchema = new mongoose.Schema({
  name: String,
  email: String,
  phone: String,
  location: String,
  otp: String,
  isVerified: Boolean,
});

const User = mongoose.model("User", userSchema);

// Twilio Configuration
const client = twilio(process.env.TWILIO_SID, process.env.TWILIO_AUTH_TOKEN);
const fromNumber = process.env.TWILIO_PHONE_NUMBER;

// Send OTP
app.post("/send-otp", async (req, res) => {
  const { phone } = req.body;
  const otp = Math.floor(100000 + Math.random() * 900000).toString();

  try {
    await client.messages.create({
      body: `Your OTP is ${otp}`,
      from: fromNumber,
      to: phone,
    });

    await User.findOneAndUpdate({ phone }, { otp }, { upsert: true });
    res.json({ message: "OTP sent successfully" });
  } catch (error) {
    res.status(500).json({ message: "Failed to send OTP" });
  }
});

// Verify OTP
app.post("/verify-otp", async (req, res) => {
  const { phone, otp } = req.body;

  const user = await User.findOne({ phone, otp });

  if (user) {
    user.isVerified = true;
    await user.save();
    res.json({ success: true });
  } else {
    res.json({ success: false });
  }
});

app.listen(5000, () => console.log("Server running on port 5000"));

3. Database (MongoDB)

    Stores user details (name, email, phone, location).
    Stores OTP temporarily (can use Redis for expiry).
    Updates isVerified: true after OTP verification.

Final Workflow

    User enters details in React frontend.
    React sends phone number to /send-otp API.
    Node.js generates OTP and sends it via Twilio.
    User enters OTP, and React sends it to /verify-otp.
    Node.js validates OTP and stores verified user.
    On success, React displays "Registration Complete."

Conclusion

    Use Firebase Auth if you want a free option.
    Use Twilio for reliable SMS verification.
    Use MongoDB to store users and OTPs.